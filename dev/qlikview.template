heat_template_version: 2013-05-23

description: |
  HEAT template for installing qlikview on Windows Server

parameters:

  server_hostname:
    type: string
    default: HeatWinResource
    description: Windows Server Name
    constraints:
    - length:
        min: 1
        max: 64
    - allowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
      description: must begin with a letter and contain only alphanumeric characters.
    
  image:
    type: string
    default: Windows Server 2008 R2 SP1
    description: Windows Server Image
    constraints:
    - allowed_values:
      - Windows Server 2008 R2 SP1
      - Windows Server 2008 R2 SP1 + SQL Server 2008 R2 SP2 Web
      description: must be a valid windows server OS.
  
  flavor:
    type: string
    description: Rackspace Cloud Server flavor
    default: 4GB Standard Instance
    constraints:
    - allowed_values:
      - 4GB Standard Instance
      - 8GB Standard Instance
      - 15GB Standard Instance
      - 30GB Standard Instance
      description: must be a valid Rackspace Cloud Server flavor.
  
resources:

  rs_windows_server:
    type: "Rackspace::Cloud::WinServer"
    properties:
      name: { get_param: server_hostname }
      flavor: { get_param: flavor }
      image: { get_param: image }
      user_data: |
        $BaseURL = "http://304548e3a421cc29c822-f6518816eb9cdc30b28dfdf16d2d7417.r95.cf1.rackcdn.com/"
        #$InstallFile = "QlikViewDesktop_x64Setup.exe"
        $InstallFile = "QlikViewX64.msi"
        $AutomationPath = "C:\windows"
        $log = ".\quikview.log"
        # Download Function
        Function Download-File ($DowloadUrl, $DestinationFileName) {
          $WebClientObject = New-Object System.Net.WebClient
          try {
            Write-Host $DestinationFileName
            Write-Host $DowloadUrl
            $WebClientObject.DownloadFile($DowloadUrl, $DestinationFileName)
            "[$(Get-Date)] Status: Downloaded $DestinationFileName Successfully"
          }
          catch{
            "[*] Installation ERROR"
          }
        }
        # Install MSI Function
        Function InstallMSI ($MSIFileName, $BuildLog){
          write-host "[$(Get-Date)] Status: Installing $MSIFileName"
          $BuildArgs = @{
            FilePath = "msiexec"
            ArgumentList = "/quiet /passive /i " +  $MSIFileName
            RedirectStandardOutput = $BuildLog
            Wait = $true
          }
          Try {
            # Install the agent
            Write-Host @BuildArgs
            Start-Process @BuildArgs
          }
          Catch {
            #"Error installing $MSIFileName : $_" | Add-Content $BuildLog
            #$failure = $true
            throw "Error: Failed to install $MSIFileName : $_"
          }
          Write-host "[$(Get-Date)] Status: Successfully Installed $MSIFileName"
        }
        # Main
        Download-File $BaseURL$InstallFile $AutomationPath"\"$InstallFile
        InstallMSI $InstallFile $log

outputs:

  public_ip:
    value: { get_attr: [ rs_windows_server, accessIPv4 ] }
    description: public IP of the windows server
  


